name: Python application  # Nombre de la automatización

# El workflow se ejecutará al hacer push a la rama main
on:
  push:
    branches: [main]

# Definiendo el trabajo del workflow
jobs:
  build:  # Nombre del trabajo
    runs-on: ubuntu-latest  # Sistema operativo donde se ejecutará

    env:  # Variables de entorno a nivel de trabajo
      mostrar: no
      plataforma: linux
      region: us-east-1
      account_id: 123456789012

    steps:  # Pasos del workflow
    - name: Checkout del código
      uses: actions/checkout@v4  # Descarga el código del repositorio

    - name: Mostrar mensaje
      run: echo "Hola mundo"

    - name: Mostrar variables de entorno
      if: ${{ env.mostrar == 'si' }}  # Condicional para ejecutar este paso solo si mostrar es 'si'
      run: |
        echo "Mostrar: ${{ env.mostrar }}"
        echo "Plataforma: ${{ env.plataforma }}"
        echo "Region: ${{ env.region }}"
        echo "Account ID: ${{ env.account_id }}"
      

    - name: "mostrando varibales de git acction"
      run:
      echo "evento: ${{ github.event_name }}"
      #  quiero ver el actoro y luego el repostorio
      echo "actor: ${{ github.actor }}"
      echo "repositorio: ${{ github.repository }}"


#     - name: Set up Python 3.10  # Configura Python 3.10
#       uses: actions/setup-python@v4
#       with:
#         python-version: "3.10"   # Especifica la versión de Python
    
#     - name: Cache pip packages   # Almacena en caché los paquetes de pip
#       uses: actions/cache@v3
#       with:
#         path: ~/.cache/pip       # Ruta donde se guardarán los paquetes
#         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  # Clave única para el caché
#         restore-keys: |          # Claves alternativas para restaurar el caché
#           ${{ runner.os }}-pip-
    
#     - name: Install dependencies  # Instala las dependencias necesarias
#       run: |
#         python -m pip install --upgrade pip  # Actualiza pip
#         pip install flake8 pytest pytest-cov # Instala herramientas de prueba y análisis
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi  # Instala dependencias del proyecto
    
#     - name: Lint with flake8     # Analiza la calidad del código
#       run: |
#         # Verifica errores de sintaxis y nombres indefinidos
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # Verifica otras reglas de estilo (como advertencias)
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
#     - name: Test with pytest     # Ejecuta las pruebas unitarias
#       run: |
#         pytest --cov=./ --cov-report=xml  # Ejecuta pruebas y genera reporte de cobertura
    
#     - name: Upload coverage reports  # Sube los reportes de cobertura
#       uses: codecov/codecov-action@v3  # Usa Codecov para visualizar la cobertura