name: Python application  # Nombre del workflow (automatizaci√≥n)

on:
  push:  # El workflow se ejecutar√° cuando haya un `push` en la rama `main`
    branches: main2

jobs:
  build:  # Definimos el trabajo `build`
    runs-on: ubuntu-latest  # Se ejecutar√° en un servidor con Ubuntu m√°s reciente

    env:  # Variables de entorno que estar√°n disponibles en el trabajo
      mostrar: no  # Variable que indica si se mostrar√°n valores (se usa en condicionales)
      plataforma: linux  # Definimos la plataforma
      region: us-east-1  # Regi√≥n para despliegue (simulaci√≥n de AWS)
      account_id: 123456789012  # ID de cuenta (simulaci√≥n)
      variable_secreto: ${{ secrets.CLAVE_SECRETO }}  # Variable de secreto desde GitHub Secrets

    steps:  # Pasos del workflow
    - name: Checkout del c√≥digo  # üîπ 1. Descarga el c√≥digo del repositorio
      uses: actions/checkout@v4  
      # Esta acci√≥n oficial de GitHub permite clonar el c√≥digo dentro del runner
      # Es necesario para que otros pasos puedan acceder a los archivos del repo

    - name: Creando JSON  # üîπ 2. Crear un archivo JSON vac√≠o
      run: |
        echo "Se est√° creando el JSON..."  # Mensaje de depuraci√≥n
        echo '{"productos": []}' > data.json  # Crea un archivo `data.json` con una lista vac√≠a
        cat data.json  # Muestra el contenido del JSON en la terminal

    - name: Metiendo datos a una lista  # üîπ 3. Agregar elementos a la lista en JSON
      run: |
        echo "Agregando productos a la lista..."  # Mensaje de depuraci√≥n
        echo '{"productos": [{"id": 1, "nombre": "Laptop"}, {"id": 2, "nombre": "Mouse"}]}' > data.json  
        # Reemplaza `data.json` con una nueva versi√≥n que tiene 2 productos
        cat data.json  # Muestra el contenido actualizado del JSON

    - name: Mostrando datos de la lista  # üîπ 4. Recorrer y mostrar los productos
      run: |
        echo "Mostrando los productos..."
        cat data.json | jq -c '.productos[]' | while read -r producto; do
          echo "Producto encontrado: $producto"  # Muestra cada producto en la lista
        done
      # `jq -c '.productos[]'` extrae cada producto como una l√≠nea JSON
      # `while read -r producto; do ... done` recorre cada l√≠nea y la imprime

    - name: Condicionales en JSON  # üîπ 5. Buscar un producto en la lista
      run: |
        echo "Buscando si hay un producto llamado 'Laptop'..."
        existe=$(cat data.json | jq '.productos[] | select(.nombre=="Laptop")')
        
        if [ -n "$existe" ]; then
          echo "‚úÖ Producto encontrado en la lista!"
          echo "$existe"  # Muestra el producto encontrado
        else
          echo "‚ùå Producto NO encontrado"
        fi
      # `jq '.productos[] | select(.nombre=="Laptop")'` busca un objeto con nombre "Laptop"
      # `if [ -n "$existe" ]; then` verifica si la variable contiene algo (si encontr√≥ el producto)
